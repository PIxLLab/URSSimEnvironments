(define (domain urs)
  (:requirements :strips :typing :equality :adl)
  (:types drone loc)
  (:predicates
    (above ?l0 ?l1 - loc)
    (aligned ?l0 ?l1 - loc)
    (at ?d - drone ?l - loc)
    (closest ?l0 ?l1 - loc)
    (collided ?l0 ?l1 - loc)
    (hovered ?d - drone)
    (oriented ?d - drone)
    (scanned ?l - loc)
  )
  (:action ascend
    :parameters (?d - drone ?l0 ?l1 - loc)
    :precondition (and
      (above ?l1 ?l0)
      (aligned ?l0 ?l1)
      (at ?d ?l0)
      (not (exists (?x - drone ?y - loc)
        (and
          (not (= ?x ?d))
          (at ?x ?y)
          (collided ?l1 ?y)
        )
      ))
      (hovered ?d)
    )
    :effect (and
      (not (at ?d ?l0))
      (at ?d ?l1)
    )
  )
  (:action descend
    :parameters (?d - drone ?l0 ?l1 - loc)
    :precondition (and
      (above ?l0 ?l1)
      (aligned ?l0 ?l1)
      (at ?d ?l0)
      (not (exists (?x - drone ?y - loc)
        (and
          (not (= ?x ?d))
          (at ?x ?y)
          (collided ?l1 ?y)
        )
      ))
      (hovered ?d)
    )
    :effect (and
      (not (at ?d ?l0))
      (at ?d ?l1)
    )
  )
  (:action land
    :parameters (?d - drone)
    :precondition (hovered ?d)
    :effect (and (not (hovered ?d)))
  )
  (:action move
    :parameters (?d - drone ?l0 ?l1 - loc)
    :precondition (and
      (at ?d ?l0)
      (not (exists (?x - drone ?y - loc)
        (and
          (not (= ?x ?d))
          (at ?x ?y)
          (collided ?l1 ?y)
        )
      ))
      (hovered ?d)
    )
    :effect (and
      (not (at ?d ?l0))
      (at ?d ?l1)
    )
  )
  (:action rotate
    :parameters (?d - drone)
    :precondition (and
      (not (oriented ?d))
      (hovered ?d)
    )
    :effect (and (oriented ?d))
  )
  (:action scan
    :parameters (?d  - drone ?l0 ?l1 - loc)
    :precondition (and
      (at ?d ?l0)
      (closest ?l0 ?l1)
      (not (exists (?x - drone ?y - loc)
        (and
          (not (= ?x ?d))
          (at ?x ?y)
          (collided ?l1 ?y)
        )
      ))
      (hovered ?d)
      (not (scanned ?l1))
    )
    :effect (and
      (not (at ?d ?l0))
      (at ?d ?l1)
      (scanned ?l1)
    )
  )
  (:action takeoff
    :parameters (?d - drone)
    :precondition (not (hovered ?d))
    :effect (and (hovered ?d))
  )
)
