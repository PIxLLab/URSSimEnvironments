// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planning.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace urs_wearable_pb {

namespace {

const ::google::protobuf::Descriptor* PlanningRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanningRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanningResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanningResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_planning_2eproto() {
  protobuf_AddDesc_planning_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "planning.proto");
  GOOGLE_CHECK(file != NULL);
  PlanningRequest_descriptor_ = file->message_type(0);
  static const int PlanningRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningRequest, initial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningRequest, goal_),
  };
  PlanningRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanningRequest_descriptor_,
      PlanningRequest::default_instance_,
      PlanningRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanningRequest));
  PlanningResponse_descriptor_ = file->message_type(1);
  static const int PlanningResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningResponse, actions_),
  };
  PlanningResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanningResponse_descriptor_,
      PlanningResponse::default_instance_,
      PlanningResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanningResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_planning_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanningRequest_descriptor_, &PlanningRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanningResponse_descriptor_, &PlanningResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_planning_2eproto() {
  delete PlanningRequest::default_instance_;
  delete PlanningRequest_reflection_;
  delete PlanningResponse::default_instance_;
  delete PlanningResponse_reflection_;
}

void protobuf_AddDesc_planning_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::urs_wearable_pb::protobuf_AddDesc_state_2eproto();
  ::urs_wearable_pb::protobuf_AddDesc_action_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016planning.proto\022\017urs_wearable_pb\032\013state"
    ".proto\032\014action.proto\"`\n\017PlanningRequest\022"
    "\'\n\007initial\030\001 \001(\0132\026.urs_wearable_pb.State"
    "\022$\n\004goal\030\002 \001(\0132\026.urs_wearable_pb.State\"<"
    "\n\020PlanningResponse\022(\n\007actions\030\001 \003(\0132\027.ur"
    "s_wearable_pb.Action", 220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning.proto", &protobuf_RegisterTypes);
  PlanningRequest::default_instance_ = new PlanningRequest();
  PlanningResponse::default_instance_ = new PlanningResponse();
  PlanningRequest::default_instance_->InitAsDefaultInstance();
  PlanningResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_planning_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_planning_2eproto {
  StaticDescriptorInitializer_planning_2eproto() {
    protobuf_AddDesc_planning_2eproto();
  }
} static_descriptor_initializer_planning_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlanningRequest::kInitialFieldNumber;
const int PlanningRequest::kGoalFieldNumber;
#endif  // !_MSC_VER

PlanningRequest::PlanningRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:urs_wearable_pb.PlanningRequest)
}

void PlanningRequest::InitAsDefaultInstance() {
  initial_ = const_cast< ::urs_wearable_pb::State*>(&::urs_wearable_pb::State::default_instance());
  goal_ = const_cast< ::urs_wearable_pb::State*>(&::urs_wearable_pb::State::default_instance());
}

PlanningRequest::PlanningRequest(const PlanningRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:urs_wearable_pb.PlanningRequest)
}

void PlanningRequest::SharedCtor() {
  _cached_size_ = 0;
  initial_ = NULL;
  goal_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanningRequest::~PlanningRequest() {
  // @@protoc_insertion_point(destructor:urs_wearable_pb.PlanningRequest)
  SharedDtor();
}

void PlanningRequest::SharedDtor() {
  if (this != default_instance_) {
    delete initial_;
    delete goal_;
  }
}

void PlanningRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanningRequest_descriptor_;
}

const PlanningRequest& PlanningRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2eproto();
  return *default_instance_;
}

PlanningRequest* PlanningRequest::default_instance_ = NULL;

PlanningRequest* PlanningRequest::New() const {
  return new PlanningRequest;
}

void PlanningRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_initial()) {
      if (initial_ != NULL) initial_->::urs_wearable_pb::State::Clear();
    }
    if (has_goal()) {
      if (goal_ != NULL) goal_->::urs_wearable_pb::State::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanningRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:urs_wearable_pb.PlanningRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .urs_wearable_pb.State initial = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initial()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_goal;
        break;
      }

      // optional .urs_wearable_pb.State goal = 2;
      case 2: {
        if (tag == 18) {
         parse_goal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:urs_wearable_pb.PlanningRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:urs_wearable_pb.PlanningRequest)
  return false;
#undef DO_
}

void PlanningRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:urs_wearable_pb.PlanningRequest)
  // optional .urs_wearable_pb.State initial = 1;
  if (has_initial()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->initial(), output);
  }

  // optional .urs_wearable_pb.State goal = 2;
  if (has_goal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:urs_wearable_pb.PlanningRequest)
}

::google::protobuf::uint8* PlanningRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:urs_wearable_pb.PlanningRequest)
  // optional .urs_wearable_pb.State initial = 1;
  if (has_initial()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->initial(), target);
  }

  // optional .urs_wearable_pb.State goal = 2;
  if (has_goal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:urs_wearable_pb.PlanningRequest)
  return target;
}

int PlanningRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .urs_wearable_pb.State initial = 1;
    if (has_initial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initial());
    }

    // optional .urs_wearable_pb.State goal = 2;
    if (has_goal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanningRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanningRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanningRequest::MergeFrom(const PlanningRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initial()) {
      mutable_initial()->::urs_wearable_pb::State::MergeFrom(from.initial());
    }
    if (from.has_goal()) {
      mutable_goal()->::urs_wearable_pb::State::MergeFrom(from.goal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanningRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningRequest::CopyFrom(const PlanningRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningRequest::IsInitialized() const {

  return true;
}

void PlanningRequest::Swap(PlanningRequest* other) {
  if (other != this) {
    std::swap(initial_, other->initial_);
    std::swap(goal_, other->goal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanningRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanningRequest_descriptor_;
  metadata.reflection = PlanningRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanningResponse::kActionsFieldNumber;
#endif  // !_MSC_VER

PlanningResponse::PlanningResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:urs_wearable_pb.PlanningResponse)
}

void PlanningResponse::InitAsDefaultInstance() {
}

PlanningResponse::PlanningResponse(const PlanningResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:urs_wearable_pb.PlanningResponse)
}

void PlanningResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanningResponse::~PlanningResponse() {
  // @@protoc_insertion_point(destructor:urs_wearable_pb.PlanningResponse)
  SharedDtor();
}

void PlanningResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlanningResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanningResponse_descriptor_;
}

const PlanningResponse& PlanningResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_planning_2eproto();
  return *default_instance_;
}

PlanningResponse* PlanningResponse::default_instance_ = NULL;

PlanningResponse* PlanningResponse::New() const {
  return new PlanningResponse;
}

void PlanningResponse::Clear() {
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanningResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:urs_wearable_pb.PlanningResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .urs_wearable_pb.Action actions = 1;
      case 1: {
        if (tag == 10) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_actions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:urs_wearable_pb.PlanningResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:urs_wearable_pb.PlanningResponse)
  return false;
#undef DO_
}

void PlanningResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:urs_wearable_pb.PlanningResponse)
  // repeated .urs_wearable_pb.Action actions = 1;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:urs_wearable_pb.PlanningResponse)
}

::google::protobuf::uint8* PlanningResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:urs_wearable_pb.PlanningResponse)
  // repeated .urs_wearable_pb.Action actions = 1;
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:urs_wearable_pb.PlanningResponse)
  return target;
}

int PlanningResponse::ByteSize() const {
  int total_size = 0;

  // repeated .urs_wearable_pb.Action actions = 1;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanningResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanningResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanningResponse::MergeFrom(const PlanningResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  actions_.MergeFrom(from.actions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanningResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningResponse::CopyFrom(const PlanningResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->actions())) return false;
  return true;
}

void PlanningResponse::Swap(PlanningResponse* other) {
  if (other != this) {
    actions_.Swap(&other->actions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanningResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanningResponse_descriptor_;
  metadata.reflection = PlanningResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace urs_wearable_pb

// @@protoc_insertion_point(global_scope)
