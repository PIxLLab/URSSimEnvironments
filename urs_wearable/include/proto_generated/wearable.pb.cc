// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wearable.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wearable.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb_wearable {

namespace {

const ::google::protobuf::Descriptor* WearableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WearableRequest_reflection_ = NULL;
struct WearableRequestOneofInstance {
  const ::pb_wearable::GetStatus* getstatus_;
}* WearableRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* WearableRequest_WearableRequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* WearableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WearableResponse_reflection_ = NULL;
struct WearableResponseOneofInstance {
  const ::pb_wearable::Status* status_;
}* WearableResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* WearableResponse_WearableResponseType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_wearable_2eproto() {
  protobuf_AddDesc_wearable_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wearable.proto");
  GOOGLE_CHECK(file != NULL);
  WearableRequest_descriptor_ = file->message_type(0);
  static const int WearableRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WearableRequest, type_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(WearableRequest_default_oneof_instance_, getstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WearableRequest, wearablerequest_oneof_),
  };
  WearableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WearableRequest_descriptor_,
      WearableRequest::default_instance_,
      WearableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WearableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WearableRequest, _unknown_fields_),
      -1,
      WearableRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WearableRequest, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WearableRequest));
  WearableRequest_WearableRequestType_descriptor_ = WearableRequest_descriptor_->enum_type(0);
  GetStatus_descriptor_ = file->message_type(1);
  static const int GetStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStatus, uav_id_),
  };
  GetStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStatus_descriptor_,
      GetStatus::default_instance_,
      GetStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStatus));
  WearableResponse_descriptor_ = file->message_type(2);
  static const int WearableResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WearableResponse, type_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(WearableResponse_default_oneof_instance_, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WearableResponse, wearableresponse_oneof_),
  };
  WearableResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WearableResponse_descriptor_,
      WearableResponse::default_instance_,
      WearableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WearableResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WearableResponse, _unknown_fields_),
      -1,
      WearableResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WearableResponse, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WearableResponse));
  WearableResponse_WearableResponseType_descriptor_ = WearableResponse_descriptor_->enum_type(0);
  Status_descriptor_ = file->message_type(3);
  static const int Status_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, yaw_),
  };
  Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Status));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wearable_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WearableRequest_descriptor_, &WearableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStatus_descriptor_, &GetStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WearableResponse_descriptor_, &WearableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Status_descriptor_, &Status::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wearable_2eproto() {
  delete WearableRequest::default_instance_;
  delete WearableRequest_default_oneof_instance_;
  delete WearableRequest_reflection_;
  delete GetStatus::default_instance_;
  delete GetStatus_reflection_;
  delete WearableResponse::default_instance_;
  delete WearableResponse_default_oneof_instance_;
  delete WearableResponse_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
}

void protobuf_AddDesc_wearable_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016wearable.proto\022\013pb_wearable\"\276\001\n\017Wearab"
    "leRequest\022>\n\004type\030\001 \002(\01620.pb_wearable.We"
    "arableRequest.WearableRequestType\022+\n\tget"
    "Status\030\002 \001(\0132\026.pb_wearable.GetStatusH\000\"%"
    "\n\023WearableRequestType\022\016\n\nGET_STATUS\020\000B\027\n"
    "\025wearablerequest_oneof\"\033\n\tGetStatus\022\016\n\006u"
    "av_id\030\001 \002(\005\"\271\001\n\020WearableResponse\022@\n\004type"
    "\030\001 \002(\01622.pb_wearable.WearableResponse.We"
    "arableResponseType\022%\n\006status\030\002 \001(\0132\023.pb_"
    "wearable.StatusH\000\"\"\n\024WearableResponseTyp"
    "e\022\n\n\006STATUS\020\000B\030\n\026wearableresponse_oneof\""
    "6\n\006Status\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001"
    "(\001\022\013\n\003yaw\030\004 \001(\001", 495);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wearable.proto", &protobuf_RegisterTypes);
  WearableRequest::default_instance_ = new WearableRequest();
  WearableRequest_default_oneof_instance_ = new WearableRequestOneofInstance;
  GetStatus::default_instance_ = new GetStatus();
  WearableResponse::default_instance_ = new WearableResponse();
  WearableResponse_default_oneof_instance_ = new WearableResponseOneofInstance;
  Status::default_instance_ = new Status();
  WearableRequest::default_instance_->InitAsDefaultInstance();
  GetStatus::default_instance_->InitAsDefaultInstance();
  WearableResponse::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wearable_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wearable_2eproto {
  StaticDescriptorInitializer_wearable_2eproto() {
    protobuf_AddDesc_wearable_2eproto();
  }
} static_descriptor_initializer_wearable_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* WearableRequest_WearableRequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WearableRequest_WearableRequestType_descriptor_;
}
bool WearableRequest_WearableRequestType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WearableRequest_WearableRequestType WearableRequest::GET_STATUS;
const WearableRequest_WearableRequestType WearableRequest::WearableRequestType_MIN;
const WearableRequest_WearableRequestType WearableRequest::WearableRequestType_MAX;
const int WearableRequest::WearableRequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WearableRequest::kTypeFieldNumber;
const int WearableRequest::kGetStatusFieldNumber;
#endif  // !_MSC_VER

WearableRequest::WearableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_wearable.WearableRequest)
}

void WearableRequest::InitAsDefaultInstance() {
  WearableRequest_default_oneof_instance_->getstatus_ = const_cast< ::pb_wearable::GetStatus*>(&::pb_wearable::GetStatus::default_instance());
}

WearableRequest::WearableRequest(const WearableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_wearable.WearableRequest)
}

void WearableRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_wearablerequest_oneof();
}

WearableRequest::~WearableRequest() {
  // @@protoc_insertion_point(destructor:pb_wearable.WearableRequest)
  SharedDtor();
}

void WearableRequest::SharedDtor() {
  if (has_wearablerequest_oneof()) {
    clear_wearablerequest_oneof();
  }
  if (this != default_instance_) {
  }
}

void WearableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WearableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WearableRequest_descriptor_;
}

const WearableRequest& WearableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wearable_2eproto();
  return *default_instance_;
}

WearableRequest* WearableRequest::default_instance_ = NULL;

WearableRequest* WearableRequest::New() const {
  return new WearableRequest;
}

void WearableRequest::clear_wearablerequest_oneof() {
  switch(wearablerequest_oneof_case()) {
    case kGetStatus: {
      delete wearablerequest_oneof_.getstatus_;
      break;
    }
    case WEARABLEREQUEST_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WEARABLEREQUEST_ONEOF_NOT_SET;
}


void WearableRequest::Clear() {
  type_ = 0;
  clear_wearablerequest_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WearableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_wearable.WearableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb_wearable.WearableRequest.WearableRequestType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb_wearable::WearableRequest_WearableRequestType_IsValid(value)) {
            set_type(static_cast< ::pb_wearable::WearableRequest_WearableRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_getStatus;
        break;
      }

      // optional .pb_wearable.GetStatus getStatus = 2;
      case 2: {
        if (tag == 18) {
         parse_getStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_wearable.WearableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_wearable.WearableRequest)
  return false;
#undef DO_
}

void WearableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_wearable.WearableRequest)
  // required .pb_wearable.WearableRequest.WearableRequestType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .pb_wearable.GetStatus getStatus = 2;
  if (has_getstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->getstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_wearable.WearableRequest)
}

::google::protobuf::uint8* WearableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_wearable.WearableRequest)
  // required .pb_wearable.WearableRequest.WearableRequestType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .pb_wearable.GetStatus getStatus = 2;
  if (has_getstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->getstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_wearable.WearableRequest)
  return target;
}

int WearableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb_wearable.WearableRequest.WearableRequestType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  switch (wearablerequest_oneof_case()) {
    // optional .pb_wearable.GetStatus getStatus = 2;
    case kGetStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getstatus());
      break;
    }
    case WEARABLEREQUEST_ONEOF_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WearableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WearableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WearableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WearableRequest::MergeFrom(const WearableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.wearablerequest_oneof_case()) {
    case kGetStatus: {
      mutable_getstatus()->::pb_wearable::GetStatus::MergeFrom(from.getstatus());
      break;
    }
    case WEARABLEREQUEST_ONEOF_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WearableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WearableRequest::CopyFrom(const WearableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WearableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_getstatus()) {
    if (!this->getstatus().IsInitialized()) return false;
  }
  return true;
}

void WearableRequest::Swap(WearableRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(wearablerequest_oneof_, other->wearablerequest_oneof_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WearableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WearableRequest_descriptor_;
  metadata.reflection = WearableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStatus::kUavIdFieldNumber;
#endif  // !_MSC_VER

GetStatus::GetStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_wearable.GetStatus)
}

void GetStatus::InitAsDefaultInstance() {
}

GetStatus::GetStatus(const GetStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_wearable.GetStatus)
}

void GetStatus::SharedCtor() {
  _cached_size_ = 0;
  uav_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStatus::~GetStatus() {
  // @@protoc_insertion_point(destructor:pb_wearable.GetStatus)
  SharedDtor();
}

void GetStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStatus_descriptor_;
}

const GetStatus& GetStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wearable_2eproto();
  return *default_instance_;
}

GetStatus* GetStatus::default_instance_ = NULL;

GetStatus* GetStatus::New() const {
  return new GetStatus;
}

void GetStatus::Clear() {
  uav_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_wearable.GetStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uav_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uav_id_)));
          set_has_uav_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_wearable.GetStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_wearable.GetStatus)
  return false;
#undef DO_
}

void GetStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_wearable.GetStatus)
  // required int32 uav_id = 1;
  if (has_uav_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uav_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_wearable.GetStatus)
}

::google::protobuf::uint8* GetStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_wearable.GetStatus)
  // required int32 uav_id = 1;
  if (has_uav_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uav_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_wearable.GetStatus)
  return target;
}

int GetStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uav_id = 1;
    if (has_uav_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uav_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStatus::MergeFrom(const GetStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uav_id()) {
      set_uav_id(from.uav_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatus::CopyFrom(const GetStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetStatus::Swap(GetStatus* other) {
  if (other != this) {
    std::swap(uav_id_, other->uav_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStatus_descriptor_;
  metadata.reflection = GetStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* WearableResponse_WearableResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WearableResponse_WearableResponseType_descriptor_;
}
bool WearableResponse_WearableResponseType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WearableResponse_WearableResponseType WearableResponse::STATUS;
const WearableResponse_WearableResponseType WearableResponse::WearableResponseType_MIN;
const WearableResponse_WearableResponseType WearableResponse::WearableResponseType_MAX;
const int WearableResponse::WearableResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WearableResponse::kTypeFieldNumber;
const int WearableResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

WearableResponse::WearableResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_wearable.WearableResponse)
}

void WearableResponse::InitAsDefaultInstance() {
  WearableResponse_default_oneof_instance_->status_ = const_cast< ::pb_wearable::Status*>(&::pb_wearable::Status::default_instance());
}

WearableResponse::WearableResponse(const WearableResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_wearable.WearableResponse)
}

void WearableResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_wearableresponse_oneof();
}

WearableResponse::~WearableResponse() {
  // @@protoc_insertion_point(destructor:pb_wearable.WearableResponse)
  SharedDtor();
}

void WearableResponse::SharedDtor() {
  if (has_wearableresponse_oneof()) {
    clear_wearableresponse_oneof();
  }
  if (this != default_instance_) {
  }
}

void WearableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WearableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WearableResponse_descriptor_;
}

const WearableResponse& WearableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wearable_2eproto();
  return *default_instance_;
}

WearableResponse* WearableResponse::default_instance_ = NULL;

WearableResponse* WearableResponse::New() const {
  return new WearableResponse;
}

void WearableResponse::clear_wearableresponse_oneof() {
  switch(wearableresponse_oneof_case()) {
    case kStatus: {
      delete wearableresponse_oneof_.status_;
      break;
    }
    case WEARABLERESPONSE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WEARABLERESPONSE_ONEOF_NOT_SET;
}


void WearableResponse::Clear() {
  type_ = 0;
  clear_wearableresponse_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WearableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_wearable.WearableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb_wearable.WearableResponse.WearableResponseType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb_wearable::WearableResponse_WearableResponseType_IsValid(value)) {
            set_type(static_cast< ::pb_wearable::WearableResponse_WearableResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional .pb_wearable.Status status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_wearable.WearableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_wearable.WearableResponse)
  return false;
#undef DO_
}

void WearableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_wearable.WearableResponse)
  // required .pb_wearable.WearableResponse.WearableResponseType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .pb_wearable.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_wearable.WearableResponse)
}

::google::protobuf::uint8* WearableResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_wearable.WearableResponse)
  // required .pb_wearable.WearableResponse.WearableResponseType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .pb_wearable.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_wearable.WearableResponse)
  return target;
}

int WearableResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb_wearable.WearableResponse.WearableResponseType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  switch (wearableresponse_oneof_case()) {
    // optional .pb_wearable.Status status = 2;
    case kStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
      break;
    }
    case WEARABLERESPONSE_ONEOF_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WearableResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WearableResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WearableResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WearableResponse::MergeFrom(const WearableResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.wearableresponse_oneof_case()) {
    case kStatus: {
      mutable_status()->::pb_wearable::Status::MergeFrom(from.status());
      break;
    }
    case WEARABLERESPONSE_ONEOF_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WearableResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WearableResponse::CopyFrom(const WearableResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WearableResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WearableResponse::Swap(WearableResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(wearableresponse_oneof_, other->wearableresponse_oneof_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WearableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WearableResponse_descriptor_;
  metadata.reflection = WearableResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Status::kXFieldNumber;
const int Status::kYFieldNumber;
const int Status::kZFieldNumber;
const int Status::kYawFieldNumber;
#endif  // !_MSC_VER

Status::Status()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_wearable.Status)
}

void Status::InitAsDefaultInstance() {
}

Status::Status(const Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_wearable.Status)
}

void Status::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  yaw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:pb_wearable.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wearable_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New() const {
  return new Status;
}

void Status::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Status*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, yaw_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_wearable.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_yaw;
        break;
      }

      // optional double yaw = 4;
      case 4: {
        if (tag == 33) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_wearable.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_wearable.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_wearable.Status)
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double yaw = 4;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->yaw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_wearable.Status)
}

::google::protobuf::uint8* Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_wearable.Status)
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double yaw = 4;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->yaw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_wearable.Status)
  return target;
}

int Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double yaw = 4;
    if (has_yaw()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {

  return true;
}

void Status::Swap(Status* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(yaw_, other->yaw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb_wearable

// @@protoc_insertion_point(global_scope)
